{"version":3,"sources":["helpers/utils.js","components/Survey.js","App.js","serviceWorker.js","index.js"],"names":["averageRating","themes","map","theme","questions","question","survey_responses","response","response_content","SurevyList","props","react_default","a","createElement","className","name","participant_count","response_rate","toFixed","submitted_response_count","onClick","goToSurvey","url","ThemeQuestion","_ref","averageResponse","_ref2","themeIndex","q","i","key","description","array","filter","el","reduce","acc","c","parseInt","length","Surevy","xs","x","type","closeModel","aria-label","aria-hidden","Survey_ThemeQuestion","App","state","surveyList","currentSurvey","callApi","fetch","then","res","json","data","surveyUrl","_this","setState","survey_result_detail","_this2","this","survey_results","_this3","_this$state","survey","index","Survey_SurevyList","Object","assign","Survey_Surevy","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNAGaA,SAAgB,SAAAC,GAC3B,OAAOA,EAAOC,IAAI,SAAAC,GAAK,OACrBA,EAAMC,UAAUF,IAAI,SAAAG,GAAQ,OAC1BA,EAASC,iBAAiBJ,IAAI,SAAAK,GAAQ,OAAIA,EAASC,yBCH5CC,EAAa,SAAAC,GAAK,OAC3BC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAf,eACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,sBAAsBJ,EAAMK,OAE5CJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAf,uBACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,sBAAsBJ,EAAMM,oBAE5CL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAf,eACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,sBAAsBJ,EAAMO,cAAcC,QAAQ,KAElEP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAf,sBACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,sBAAsBJ,EAAMS,2BAE5CR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,UACEC,UAAU,8BACVM,QAAS,kBAAMV,EAAMW,WAAWX,EAAMY,OAFxC,oBAUKC,EAAgB,SAAAC,GAA+B,IAA7BvB,EAA6BuB,EAA7BvB,OAAQwB,EAAqBD,EAArBC,gBAGrC,OAAOxB,EAAOC,IAAI,SAAAwB,EAAsBC,GAAtB,IAAGvB,EAAHsB,EAAGtB,UAAWW,EAAdW,EAAcX,KAAd,OAClBJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iCACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gDAAf,UAAsEC,IAEzEX,EAAUF,IAAI,SAAC0B,EAAGC,GAAJ,OACXlB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BAA0BgB,IAAKD,GAC9ClB,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gCAAf,cAA+Dc,EAAEG,aACtEpB,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gCAAf,iBAAL,MDjCUkB,ECuBI,SAACL,EAAYE,GAAb,OAAoCJ,EAAgBE,GAAYE,GDlBzCI,OAAO,SAAAC,GAAE,MAAW,KAAPA,IC4B8BlC,CAAc2B,EAAYE,IDhChGM,OAAO,SAACC,EAAKC,GAAN,OAAYD,EAAME,SAASD,IAAI,GAC1CL,EAAMO,QAAQrB,QAAQ,KAFlB,IAAAc,QCwCPQ,EAAS,SAAC9B,GACrB,IAAMT,EAAwB,CAAC,UDnD/BkC,OAAO,SAACM,EAAIC,GAAL,OAAYD,GAAMA,EAAGC,GAAKD,EAAGC,GAAK,MCmDChC,GAChCK,EAAwBL,EAAxBK,KAAME,EAAkBP,EAAlBO,cACd,OACEN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qDACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uCACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACbH,EAAAC,EAAAC,cAAA,UAAQ8B,KAAK,SAASvB,QAAS,kBAAMV,EAAMkC,cAAc9B,UAAU,QAAQ+B,aAAW,SACpFlC,EAAAC,EAAAC,cAAA,QAAMiC,cAAY,QAAlB,UAGH/B,GAAQJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACtBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sCAAf,eACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,sBAAsBC,IAErCE,GAAiBN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAC/BH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sCAAf,iBACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,sBAAsBG,EAAcC,QAAQ,GAA1D,OAEFP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACdH,EAAAC,EAAAC,cAACkC,EAAD,CAAetB,gBAAiBzB,EAAcC,GAASA,OAAQA,SCpB/D+C,6MA/CbC,MAAQ,CACNC,WAAY,GACZC,cAAe,QASjBC,QAAU,SAAA9B,GAAG,OACX+B,MAAM/B,GACHgC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAG,GAAI,OAAIA,OAElBpC,WAAa,SAAAqC,GACXC,EAAKP,QAAQM,GAAWJ,KAAK,SAAAG,GAAI,OAC/BE,EAAKC,SAAS,CAAET,cAAeM,EAAKI,4BAIxCjB,WAAa,kBAAMe,EAAKC,SAAS,CAAET,cAAe,2FAjB9B,IAAAW,EAAAC,KAClBA,KAAKX,QAAQ,SAASE,KAAK,SAAAG,GAAI,OAC7BK,EAAKF,SAAS,CAAEV,WAAYO,EAAKO,oDAiB5B,IAAAC,EAAAF,KAAAG,EAC+BH,KAAKd,MAAnCC,EADDgB,EACChB,WAAYC,EADbe,EACaf,cAEpB,OACExC,EAAAC,EAAAC,cAAA,WAASC,UAAU,aACjBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QAAd,uBAGJH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACZoC,EAAWhD,IAAI,SAACiE,EAAQC,GAAT,OACdzD,EAAAC,EAAAC,cAACwD,EAADC,OAAAC,OAAA,CAAYzC,IAAKsC,GAAWD,EAA5B,CAAoC9C,WAAY4C,EAAK5C,iBAGxD8B,GACCxC,EAAAC,EAAAC,cAAC2D,EAADF,OAAAC,OAAA,GAAYpB,EAAZ,CAA2BP,WAAYmB,KAAKnB,sBAzCpC6B,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECVNC,IAASC,OAAOrE,EAAAC,EAAAC,cAACoE,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhC,KAAK,SAAAiC,GACjCA,EAAaC","file":"static/js/main.a9676131.chunk.js","sourcesContent":["export const getSurveyProps = (p, o) =>\n  p.reduce((xs, x) => (xs && xs[x] ? xs[x] : null), o);\n\nexport const averageRating = themes => {\n  return themes.map(theme =>\n    theme.questions.map(question =>\n      question.survey_responses.map(response => response.response_content)\n    )\n  );\n};\n\nexport const getAvg = array => {\n  const total = array.reduce((acc, c) => acc + parseInt(c), 0);\n  return (total / array.length).toFixed(1);\n};\n\nexport const cleanEmptyString = (array) => array.filter(el => el !== '')\n","import React, { Component } from \"react\";\nimport { getSurveyProps, averageRating, getAvg, cleanEmptyString } from \"../helpers/utils\";\n\nexport const SurevyList = props => (\n    <div className=\"col-6\">\n      <div className=\"border px-4 py-3\">\n        <div className=\"border-bottom\">\n          <div className=\"text-primary\">Surevy name</div>\n          <h5 className=\"font-weight-normal\">{props.name}</h5>\n        </div>\n        <div className=\"pt-3 border-bottom\">\n          <div className=\"text-primary\">Surevy participants</div>\n          <h5 className=\"font-weight-normal\">{props.participant_count}</h5>\n        </div>\n        <div className=\"pt-3 border-bottom\">\n          <div className=\"text-primary\">Surevy rate</div>\n          <h5 className=\"font-weight-normal\">{props.response_rate.toFixed(2)}</h5>\n        </div>\n        <div className=\"pt-3 border-bottom\">\n          <div className=\"text-primary\">Surevy submittions</div>\n          <h5 className=\"font-weight-normal\">{props.submitted_response_count}</h5>\n        </div>\n        <div className=\"pt-3\">\n          <button\n            className=\"btn btn-secondary rounded-0\"\n            onClick={() => props.goToSurvey(props.url)}>\n            Go to survey\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n  \n  export const ThemeQuestion = ({themes, averageResponse}) => {\n    const averageRating = (themeIndex, i) => cleanEmptyString(averageResponse[themeIndex][i]) \n  \n    return themes.map(({ questions, name }, themeIndex) => (\n    <div className=\"col-12 pl-0 text-left\">\n        <div className=\"w-100 text-left border-bottom\">\n            <div className=\"text-primary mt-3 text-left font-weight-bold\">Topic: {name}</div>\n        </div>\n        {questions.map((q, i) => (\n            <div className=\"border-bottom mb-3 py-2\" key={i}>\n            <div><div className=\"text-primary float-left mr-2\">Qusetion: </div>{q.description}</div>\n            <div><div className=\"text-primary float-left mr-2\">Avg. Rating: </div> { getAvg(averageRating(themeIndex, i)) }</div>\n            </div>\n        ))}\n    </div>\n  ))}\n  \n  \n  export const Surevy = (props) => {\n    const themes = getSurveyProps([\"themes\"], props);\n      const { name, response_rate } = props;\n      return (\n        <div className=\"row w-100 bg-white animate slideIn survey-results\">\n          <div className=\"col-8 border px-4 py-3 mx-auto mt-5\">\n            <div className=\"row justify-content-end\">\n              <button type=\"button\" onClick={() => props.closeModel()} className=\"close\" aria-label=\"Close\">\n                <span aria-hidden=\"true\">&times;</span>\n              </button>\n            </div>\n            {name && <div className=\"border-bottom\">\n              <div className=\"text-primary mt-1 font-weight-bold\">Surevy name</div>\n              <h5 className=\"font-weight-normal\">{name}</h5>\n            </div>}\n            {response_rate && <div className=\"border-bottom\">\n              <div className=\"text-primary mt-2 font-weight-bold\">Response rate</div>\n              <h5 className=\"font-weight-normal\">{response_rate.toFixed(2)} %</h5>\n            </div>}\n            <div className=\"pt-3\">\n              <div className=\"d-flex flex-column\">\n               <ThemeQuestion averageResponse={averageRating(themes)} themes={themes} />\n              </div>\n            </div>\n          </div>\n        </div>\n      );\n  }","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport {Surevy, SurevyList }from './components/Survey';\n\nclass App extends Component {\n  state = {\n    surveyList: [],\n    currentSurvey: null\n  };\n\n  componentDidMount() {\n    this.callApi(\"/data\").then(data =>\n      this.setState({ surveyList: data.survey_results })\n    );\n  }\n\n  callApi = url =>\n    fetch(url)\n      .then(res => res.json())\n      .then(data => data);\n\n  goToSurvey = surveyUrl => {\n    this.callApi(surveyUrl).then(data =>\n      this.setState({ currentSurvey: data.survey_result_detail })\n    );\n  };\n\n  closeModel = () => this.setState({ currentSurvey: null });\n\n  render() {\n    const { surveyList, currentSurvey } = this.state;\n\n    return (\n      <section className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-12 pt-4\">\n            <h2 className=\"mb-4\">Available surveys</h2>\n          </div>\n        </div>\n        <div className=\"row\">\n          {surveyList.map((survey, index) => (\n            <SurevyList key={index} {...survey} goToSurvey={this.goToSurvey} />\n          ))}\n        </div>\n        {currentSurvey && (\n          <Surevy {...currentSurvey} closeModel={this.closeModel} />\n        )}\n      </section>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}